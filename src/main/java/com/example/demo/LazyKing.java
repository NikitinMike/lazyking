package com.example.demo;

import java.util.*;

/*
 * В одной далекой стране правил крайне сумасбродный король, который больше всего на свете любил власть.
 * Ему подчинялось множество людей, но вот незадача, у его подчиненных тоже были свои слуги.
 * Король обезумел от мысли, что какой-нибудь дворянин или даже зажиточный холоп может иметь больше слуг, чем он сам.
 * И приказал всем людям на бумаге через запятую написать свое имя и имена своих прямых подчиненных.
 *
 * По результатам опроса король получил огромный список из имен (see "pollResults")
 *
 * У короля разболелась голова. Что с этими данными делать, король не знал и делегировал задачу невезучему слуге.

 * Помогите слуге правильно составить иерархию и подготовить отчет для короля следующим образом:
 *
 * король
 *     дворянин Кузькин
 *         управляющий Семен Семеныч
 *             крестьянин Федя
 *             доярка Нюра
 *         жена Кузькина
 *         ...
 *     секретарь короля
 *         зажиточный холоп
 *         ...
 *     ...
 *
 * Помните:
 *  1. Те, кто у кого нет подчиненных, просто написали свое имя.
 *  2. Те, кого никто не указал как слугу, подчиняются напрямую королю (ну, пускай бедный король так думает).
 *  3. Итоговый список должен быть отсортирован в алфавитном порядке на каждом уровне иерархии.
 *
 * Ответ присылайте ссылкой на опубликованный приватный Gist.
 * */

public class LazyKing {
    private static final List<String> pollResults = List.of(
            "служанка Аня",
            "управляющий Семен Семеныч: крестьянин Федя, доярка Нюра",
            "дворянин Кузькин: управляющий Семен Семеныч, жена Кузькина, экономка Лидия Федоровна",
            "экономка Лидия Федоровна: дворник Гена, служанка Аня",
            "доярка Нюра",
            "кот Василий: человеческая особь Катя",
            "дворник Гена: посыльный Тошка",
            "киллер Гена",
            "зажиточный холоп: крестьянка Таня",
            "секретарь короля: зажиточный холоп, шпион Т",
            "шпион Т: кучер Д",
            "посыльный Тошка: кот Василий",
            "аристократ Клаус",
            "просветленный Антон",
            "репка: дедка",
            "дедка: бабка",
            "бабка: внучка",
            "внучка: жучка",
            "жучка: кошка",
            "кошка: мышка"
    );

    public static void main(String... args) {
        UnluckyVassal unluckyVassal = new UnluckyVassal();
        unluckyVassal.printReportForKing(pollResults);
    }
}

class UnluckyVassal {
    public void printReportForKing(List<String> pollResults) {
        TreeMap<String,String> vassals = new TreeMap<>();
        String king = "КОРОЛЬ";
        for (String pollResult : pollResults) {
            String[] record = pollResult.split(":");
            String master = record[0].trim();
            if (record.length > 1)
                for (String person : record[1].split(","))
                    vassals.put(person.trim(),master);
            vassals.putIfAbsent(master,king);
        }
        vassalsList(vassals,king,0);
    }

    void vassalsList(TreeMap<String,String> vassals, String master,int level){
        System.out.println("\t".repeat(level)+master);
        vassals.forEach((k,v)-> {
            if(v.equals(master))
                vassalsList(vassals, k,level+1);
        });
    }

}

